#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "sleep.h"
#include "xaxidma.h"
#include "xtime_l.h"

#define TX_DMA_ID                 XPAR_PS2PL_DMA_DEVICE_ID
#define TX_DMA_MM2S_LENGTH_ADDR  (XPAR_PS2PL_DMA_BASEADDR + 0x28) // Reports actual number of bytes transferred from PS->PL (use Xil_In32 for report)

#define RX_DMA_ID                 XPAR_PL2PS_DMA_DEVICE_ID
#define RX_DMA_S2MM_LENGTH_ADDR  (XPAR_PL2PS_DMA_BASEADDR + 0x58) // Reports actual number of bytes transferred from PL->PS (use Xil_In32 for report)

#define TX_BUFFER (XPAR_DDR_MEM_BASEADDR + 0x20000000) // 0 + 512MByte
#define RX_BUFFER (XPAR_DDR_MEM_BASEADDR + 0x30000000) // 0 + 768MByte
#define N 4

#define Max_packet_len N*N

int A[N][N];

int G[N][N];
int B[N][N];
int R[N][N];

/* User application global variables & defines */

XAxiDma AxiDma_TX;
XAxiDma AxiDma_RX;

int main()
{
	Xil_DCacheDisable();
	int Status;
	XTime preExecCyclesFPGA = 0;
	XTime postExecCyclesFPGA = 0;
	XTime preExecCyclesSW = 0;
	XTime postExecCyclesSW = 0;

	u8 Value;

	u8 *TxBufferPtr;
	u32 *RxBufferPtr;

	TxBufferPtr = (u8 *)TX_BUFFER ;
	RxBufferPtr = (u32 *)RX_BUFFER;

	print("HELLO 1\r\n");
	// User application local variables

	init_platform();
	xil_printf("button 0 pressed\n\r");
	xil_printf("Eleos\n\r");



	int i,j;
	int UL,UR,UC,LR,LL,LC,CR,CC,CL;
	int counter =1;



	for (i =0;i<N;i++){
		for (j=0; j<N; j++){
			A[i][j]=counter%256 ;
			counter++;

		}
	}

    // Step 1: Initialize TX-DMA Device (PS->PL)

	XAxiDma_Config *CfgPtr_TX;

	CfgPtr_TX = XAxiDma_LookupConfig(TX_DMA_ID);
		if (!CfgPtr_TX) {
			xil_printf("No config found for %d\r\n", TX_DMA_ID);
			return XST_FAILURE;
		}

		Status = XAxiDma_CfgInitialize(&AxiDma_TX, CfgPtr_TX);
		if (Status != XST_SUCCESS) {
			xil_printf("Initialization failed %d\r\n", Status);
			return XST_FAILURE;
		}

		if(XAxiDma_HasSg(&AxiDma_TX)){
			xil_printf("Device configured as SG mode \r\n");
			return XST_FAILURE;
		}

		/* Disable interrupts, we use polling mode
		 */
		XAxiDma_IntrDisable(&AxiDma_TX, XAXIDMA_IRQ_ALL_MASK,
							XAXIDMA_DEVICE_TO_DMA);
		XAxiDma_IntrDisable(&AxiDma_TX, XAXIDMA_IRQ_ALL_MASK,
							XAXIDMA_DMA_TO_DEVICE);


    // Step 2: Initialize RX-DMA Device (PL->PS)
		XAxiDma_Config *CfgPtr_RX;
		CfgPtr_RX = XAxiDma_LookupConfig(RX_DMA_ID);
				if (!CfgPtr_RX) {
					xil_printf("No config found for %d\r\n", RX_DMA_ID);
					return XST_FAILURE;
				}

				Status = XAxiDma_CfgInitialize(&AxiDma_RX, CfgPtr_RX);
				if (Status != XST_SUCCESS) {
					xil_printf("Initialization failed %d\r\n", Status);
					return XST_FAILURE;
				}

				if(XAxiDma_HasSg(&AxiDma_RX)){
					xil_printf("Device configured as SG mode \r\n");
					return XST_FAILURE;
				}

				/* Disable interrupts, we use polling mode
				 */
				XAxiDma_IntrDisable(&AxiDma_RX, XAXIDMA_IRQ_ALL_MASK,
									XAXIDMA_DEVICE_TO_DMA);
				XAxiDma_IntrDisable(&AxiDma_RX, XAXIDMA_IRQ_ALL_MASK,
									XAXIDMA_DMA_TO_DEVICE);

	XTime_GetTime(&preExecCyclesFPGA);


    // Step 3 : Perform FPGA processing

	Value = 0x01;
		xil_prinf("TxBuffer");
		for (i=0; i<Max_packet_len; i++){

			TxBufferPtr[i]=Value;

			Value = (Value + 1) & 0xFF;
			xil_printf("%d\n\r",TxBuffer[i]);
		}



		Xil_DCacheFlushRange((UINTPTR)TxBufferPtr, Max_packet_len);
		#ifdef __aarch64__
			Xil_DCacheFlushRange((UINTPTR)RxBufferPtr, Max_packet_len);
		#endif

    //      3a: Setup RX-DMA transaction
			Status = XAxiDma_SimpleTransfer(&AxiDma_RX,(UINTPTR) RxBufferPtr,
							Max_packet_len, XAXIDMA_DEVICE_TO_DMA);

			if (Status != XST_SUCCESS) {
						return XST_FAILURE;
					}


    //      3b: Setup TX-DMA transaction

			Status = XAxiDma_SimpleTransfer(&AxiDma_TX,(UINTPTR) TxBufferPtr,
					Max_packet_len, XAXIDMA_DMA_TO_DEVICE);

			if (Status != XST_SUCCESS) {
					return XST_FAILURE;
				}



    //      3c: Wait for TX-DMA & RX-DMA to finish

			while ((XAxiDma_Busy(&AxiDma_RX,XAXIDMA_DEVICE_TO_DMA)) ||
						(XAxiDma_Busy(&AxiDma_TX,XAXIDMA_DMA_TO_DEVICE))) {*/
							/* Wait */
			/*		}
		u32 *Rxtest;
		Rxtest = (u32 *)RX_BUFFER;
		for (i = 0;i<Max_packet_len;i++){
			xil_printf("%d\n",Rxtest[i]);
		}

    XTime_GetTime(&postExecCyclesFPGA);

    //XTime_GetTime(&preExecCyclesSW);
    XTime_GetTime((XTime *) &preExecCyclesSW);
    // Step 5: Perform SW processing
*/
	  for (i = 0; i < N; i++)
	  {
	    for (j = 0; j < N; j++)
	    {

	      if (i == 0 || j == 0)
	      {
	        UL = 0;
	      }
	      else
	      {
	        UL = A[i - 1][j - 1];
	      }

	      if (i == 0)
	      {
	        UC = 0;
	      }
	      else
	      {
	        UC = A[i - 1][j];
	      }

	      if (i == 0 || j == N - 1)
	      {
	        UR = 0;
	      }
	      else
	      {
	        UR = A[i - 1][j + 1];
	      }

	      if (j == 0)
	      {
	        CL = 0;
	      }
	      else
	      {
	        CL = A[i][j - 1];
	      }

	      CC = A[i][j];

	      if (j == N - 1)
	      {
	        CR = 0;
	      }
	      else
	      {
	        CR = A[i][j + 1];
	      }

	      if (i == N - 1 || j == 0)
	      {
	        LL = 0;
	      }
	      else
	      {
	        LL = A[i + 1][j - 1];
	      }

	      if (i == N - 1)
	      {
	        LC = 0;
	      }
	      else
	      {
	        LC = A[i + 1][j];
	      }

	      if (i == N - 1 || j == N - 1)
	      {
	        LR = 0;
	      }
	      else
	      {
	        LR = A[i + 1][j + 1];
	      }

	      if (i % 2 == 0)
	      {
	        if (j % 2 == 0)
	        { // periptosi ii
	          G[i][j] = (CC);
	          B[i][j] = (CL + CR) / 2;
	          R[i][j] = (UC + LC) / 2;
	        }
	        else
	        { // periptosi iv
	          B[i][j] = (CC);
	          R[i][j] = (UL + UR + LL + LR) / 4;
	          G[i][j] = (UC + LC + CL + CR) / 4;
	        }
	      }
	      else
	      {
	        if (j % 2 == 0)
	        { // periptosi iii
	          R[i][j] = (CC);
	          B[i][j] = (UL + UR + LL + LR) / 4;
	          G[i][j] = (UC + LC + CL + CR) / 4;
	        }
	        else
	        { // periptosi i
	          G[i][j] = (CC);
	          B[i][j] = (UC + LC) / 2;
	          R[i][j] = (CL + CR) / 2;
	        }
	      }
	    }
	  }

    //XTime_GetTime(&postExecCyclesSW);
    XTime_GetTime((XTime *) &postExecCyclesSW);

    for (i =0; i<N;i++){
    	for (j = 0;j<N;j++){
    		xil_printf("%d,%d,%d\n\r",R[i][j],G[i][j],B[i][j]);
    	}
    }

     printf("Swpre %lld, Swposr %lld, Diff %lld\n\r", preExecCyclesSW, postExecCyclesSW, postExecCyclesSW-preExecCyclesSW);

    // Step 6: Compare FPGA and SW results
    //     6a: Report total percentage error
    //     6b: Report FPGA execution time in cycles (use preExecCyclesFPGA and postExecCyclesFPGA)
    //     6c: Report SW execution time in cycles (use preExecCyclesSW and postExecCyclesSW)
    //     6d: Report speedup (SW_execution_time / FPGA_exection_time)

    cleanup_platform();
    return 0;
}
